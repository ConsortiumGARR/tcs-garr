image: harbor.infra.garr.it/cache/library/python:3.12

stages:
  - lint
  - auto-bump
  - publish

before_script:
  - pip install poetry
  - poetry config virtualenvs.create false # Disable virtual environment creation and install dependencies in the system scope
  - poetry install
  - echo "Dependencies installed, building package..."
  - poetry build
  - echo "Build done."

lint:
  stage: lint
  script:
    - poetry run ruff format .
  only:
    - main

auto-bump:
  stage: auto-bump
  script:
    - git config user.email $CI_EMAIL && git config user.name $CI_USERNAME
    - git config http.sslVerify false
    - git remote rm origin && git remote add origin https://$CI_USERNAME:$PROJECT_ACCESS_TOKEN@$CI_SERVER_HOST/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME.git
    - git checkout -B "$CI_COMMIT_REF_NAME" "$CI_COMMIT_SHA"
    - poetry run cz bump --yes # execute auto bump and push to main
    - git push --follow-tags origin $CI_COMMIT_BRANCH:$CI_COMMIT_BRANCH
  rules:
    # $GITLAB_USER_LOGIN != $CI_USERNAME ensures that this job won't produce an infinite loop by triggering itself when pushing back to the main branch.
    - if: '$CI_COMMIT_BRANCH == "main" && $GITLAB_USER_LOGIN != $CI_USERNAME && ($CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "merge_request_event")'

publish_gitlab:
  stage: publish
  script:
    - poetry config repositories.gitlab ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi
    - echo "Repository gitlab configured ..."
    - echo "Publishing package to GitLab Package Registry"
    - poetry publish --repository gitlab -u gitlab-ci-token -p ${CI_JOB_TOKEN} --skip-existing
    - echo "Publishing to GitLab done!"
  only:
    - main

publish_pypi:
  stage: publish
  script:
    - poetry config pypi-token.pypi ${PYPI_TOKEN}
    - echo "Repository PyPI configured ..."
    - echo "Publishing package to PyPI"
    - poetry publish
    - echo "Publishing to PyPI done!"
  only:
    - main
