image: harbor.infra.garr.it/cache/library/python:3.12

stages:
  - lint
  - auto-bump-and-build
  - publish
  - release
  - mr-wa

lint:
  stage: lint
  before_script:
    - pip install poetry
    - poetry config virtualenvs.create false # Disable virtual environment creation and install dependencies in the system scope
    - poetry install
    - echo "Dependencies installed, building package..."
  script:
    - poetry run ruff format .
  only:
    - main

auto-bump-and-build:
  stage: auto-bump-and-build
  before_script:
    - pip install poetry
    - poetry config virtualenvs.create false # Disable virtual environment creation and install dependencies in the system scope
    - poetry install
    - echo "Dependencies installed, building package..."
  script:
    - git config user.email $CI_EMAIL && git config user.name $CI_USERNAME
    - git config http.sslVerify false
    - git remote rm origin && git remote add origin https://$CI_USERNAME:$PROJECT_ACCESS_TOKEN@$CI_SERVER_HOST/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME.git
    - git checkout -B "$CI_COMMIT_REF_NAME" "$CI_COMMIT_SHA"

    # Get the previous tag
    - PREVIOUS_TAG=$(git describe --tags --abbrev=0 || echo "0.0.0")
    - |
      echo "Previous tag: $PREVIOUS_TAG"

    - poetry run cz bump --yes || true # execute auto bump, continue even if no bump is necessary
    - git push -o ci.skip --tags origin $CI_COMMIT_BRANCH:$CI_COMMIT_BRANCH

    # Get the new tag after bumping (if any)
    - NEW_TAG=$(git describe --tags --abbrev=0 || echo "$PREVIOUS_TAG")
    - |
      echo "New tag: $NEW_TAG"

    # Compare the previous tag and new tag, save NEW_TAG only if they are different
    - |
      if [[ "$NEW_TAG" != "$PREVIOUS_TAG" ]]; then
        echo "New tag detected: $NEW_TAG"
        echo "NEW_TAG=$NEW_TAG" > new_tag.env
      fi

    - poetry build
  only:
    - main
  artifacts:
    paths:
      - dist/
    reports:
      dotenv: new_tag.env

publish_gitlab:
  stage: publish
  script:
    - pip install --upgrade pip
    - pip install build twine
    - echo "Publishing package to Gitlab"
    - TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci-token python -m twine upload --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi dist/*
    - echo "Publishing to GitLab done!"
  only:
    - main

do_nothing:
  stage: mr-wa
  script: echo "Dummy job for merge-request. For info check https://stackoverflow.com/a/73333320"
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'

publish_pypi:
  stage: publish
  script:
    - pip install --upgrade pip
    - pip install build twine
    - echo "Publishing package to PyPI"
    - TWINE_PASSWORD=${PYPI_TOKEN} TWINE_USERNAME=__token__ python -m twine upload dist/*
    - echo "Publishing to PyPI done!"
  only:
    - main

build_docker_image:
  stage: publish
  image: harbor.infra.garr.it/cache/library/docker
  services:
    - name: harbor.infra.garr.it/cache/library/docker:dind
      alias: docker
  variables:
    CONTAINER_IMAGE_PATH: $CI_REGISTRY/$CI_PROJECT_PATH
    IMAGE_NAME: tcs-garr
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - export TAG=$(grep '^version =' pyproject.toml | sed -E 's/version = "(.*)"/\1/')
  script:
    # Only build when merging request
    - echo "Building $CONTAINER_IMAGE_PATH/$IMAGE_NAME:latest"
    - docker build --tag $CONTAINER_IMAGE_PATH/$IMAGE_NAME:latest -f ./Dockerfile .

    # Build and push latest tag on main branch
    - |
      if [[ "$CI_COMMIT_REF_NAME" == "main" ]]; then
        docker push $CONTAINER_IMAGE_PATH/$IMAGE_NAME:latest
        echo "Pushed $CONTAINER_IMAGE_PATH/$IMAGE_NAME:latest"
      fi

    # Build and push on tag creation
    - |
      if [[ -n "$NEW_TAG" ]]; then
        docker build --tag $CONTAINER_IMAGE_PATH/$IMAGE_NAME:$NEW_TAG -f ./Dockerfile .
        docker push $CONTAINER_IMAGE_PATH/$IMAGE_NAME:$NEW_TAG
        docker push $CONTAINER_IMAGE_PATH/$IMAGE_NAME:latest
        echo "Pushed $CONTAINER_IMAGE_PATH/$IMAGE_NAME with tag: $NEW_TAG, latest."
      fi
  rules:
    - if: $CI_COMMIT_REF_NAME == "main"
      changes:
        - Dockerfile
        - tcs_garr/*
        - pyproject.toml
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      changes:
        - Dockerfile
        - tcs_garr/*
        - pyproject.toml
    - if: "$NEW_TAG"

release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  script:
    - echo "Running the release job for $NEW_TAG."
    - "awk '/^## Unreleased/ { next } ; /^## / { r++ ; if ( r <2) { print ; next } else { exit } }; /^/ { print } ;' < CHANGELOG.md >INCREMENTAL_CHANGELOG.md"
  release:
    tag_name: "v$NEW_TAG"
    name: "Release $NEW_TAG"
    description: INCREMENTAL_CHANGELOG.md
  rules:
    - if: "$NEW_TAG"
