image: harbor.infra.garr.it/cache/library/python:3.12

stages:
  - lint
  - auto-bump
  - publish
  - mr-wa

before_script:
  - pip install poetry
  - poetry config virtualenvs.create false # Disable virtual environment creation and install dependencies in the system scope
  - poetry install
  - echo "Dependencies installed, building package..."

lint:
  stage: lint
  script:
    - poetry run ruff format .
  only:
    - main

auto-bump:
  stage: auto-bump
  script:
    - git config user.email $CI_EMAIL && git config user.name $CI_USERNAME
    - git config http.sslVerify false
    - git remote rm origin && git remote add origin https://$CI_USERNAME:$PROJECT_ACCESS_TOKEN@$CI_SERVER_HOST/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME.git
    - git checkout -B "$CI_COMMIT_REF_NAME" "$CI_COMMIT_SHA"
    - poetry run cz bump --yes || true # execute auto bump, continue even if no bump is necessary
    - git push -o ci.skip --tags origin $CI_COMMIT_BRANCH:$CI_COMMIT_BRANCH
    - poetry build
  only:
    - main
  artifacts:
    paths:
      - dist/

publish_gitlab:
  stage: publish
  script:
    - pip install --upgrade pip
    - pip install build twine
    - echo "Publishing package to Gitlab"
    - TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci-token python -m twine upload --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi dist/*
    - echo "Publishing to GitLab done!"
  only:
    - main

publish_pypi:
  stage: publish
  script:
    - pip install --upgrade pip
    - pip install build twine
    - echo "Publishing package to PyPI"
    - TWINE_PASSWORD=${PYPI_TOKEN} TWINE_USERNAME=__token__ python -m twine upload dist/*
    - echo "Publishing to PyPI done!"
  only:
    - main

build_docker_image:
  stage: publish
  image: harbor.infra.garr.it/cache/library/docker
  services:
    - name: harbor.infra.garr.it/cache/library/docker:dind
      alias: docker
  variables:
    CONTAINER_IMAGE_PATH: $CI_REGISTRY/$CI_PROJECT_PATH
    IMAGE_NAME: tcs-garr
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - export TAG=$(grep '^version =' pyproject.toml | sed -E 's/version = "(.*)"/\1/')
  script:
    - echo "Building $CONTAINER_IMAGE_PATH/$IMAGE_NAME:$TAG"
    - docker pull $CONTAINER_IMAGE_PATH/$IMAGE_NAME:$TAG || true
    - >-
      docker build --cache-from $CONTAINER_IMAGE_PATH/$IMAGE_NAME:$TAG
      --tag $CONTAINER_IMAGE_PATH/$IMAGE_NAME:$TAG
      --tag $CONTAINER_IMAGE_PATH/$IMAGE_NAME:latest
      -f ./Dockerfile .
    - docker push $CONTAINER_IMAGE_PATH/$IMAGE_NAME:$TAG
    - docker push $CONTAINER_IMAGE_PATH/$IMAGE_NAME:latest
    - echo "Pushed $CONTAINER_IMAGE_PATH/$IMAGE_NAME:$TAG and latest"
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_REF_NAME == "main" || $CI_PIPELINE_SOURCE == 'merge_request_event'
      changes:
        - Dockerfile
        - tcs_garr/*
